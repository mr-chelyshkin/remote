// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: actions.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_actions_proto protoreflect.FileDescriptor

var file_actions_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x70, 0x62, 0x1a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x32, 0x9f, 0x01, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x31, 0x0a, 0x0a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x11,
	0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x28, 0x01, 0x12, 0x2f, 0x0a, 0x0a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x6e,
	0x6b, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x09, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x69,
	0x72, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var file_actions_proto_goTypes = []interface{}{
	(*TransportData)(nil), // 0: pb.TransportData
	(*Response)(nil),      // 1: pb.Response
}
var file_actions_proto_depIdxs = []int32{
	0, // 0: pb.Transport.UploadFile:input_type -> pb.TransportData
	0, // 1: pb.Transport.UploadLink:input_type -> pb.TransportData
	0, // 2: pb.Transport.UploadDir:input_type -> pb.TransportData
	1, // 3: pb.Transport.UploadFile:output_type -> pb.Response
	1, // 4: pb.Transport.UploadLink:output_type -> pb.Response
	1, // 5: pb.Transport.UploadDir:output_type -> pb.Response
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_actions_proto_init() }
func file_actions_proto_init() {
	if File_actions_proto != nil {
		return
	}
	file_response_proto_init()
	file_request_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_actions_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_actions_proto_goTypes,
		DependencyIndexes: file_actions_proto_depIdxs,
	}.Build()
	File_actions_proto = out.File
	file_actions_proto_rawDesc = nil
	file_actions_proto_goTypes = nil
	file_actions_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TransportClient is the client API for Transport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransportClient interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (Transport_UploadFileClient, error)
	UploadLink(ctx context.Context, in *TransportData, opts ...grpc.CallOption) (*Response, error)
	UploadDir(ctx context.Context, in *TransportData, opts ...grpc.CallOption) (*Response, error)
}

type transportClient struct {
	cc grpc.ClientConnInterface
}

func NewTransportClient(cc grpc.ClientConnInterface) TransportClient {
	return &transportClient{cc}
}

func (c *transportClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (Transport_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Transport_serviceDesc.Streams[0], "/pb.Transport/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &transportUploadFileClient{stream}
	return x, nil
}

type Transport_UploadFileClient interface {
	Send(*TransportData) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type transportUploadFileClient struct {
	grpc.ClientStream
}

func (x *transportUploadFileClient) Send(m *TransportData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transportUploadFileClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transportClient) UploadLink(ctx context.Context, in *TransportData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Transport/UploadLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportClient) UploadDir(ctx context.Context, in *TransportData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Transport/UploadDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransportServer is the server API for Transport service.
type TransportServer interface {
	UploadFile(Transport_UploadFileServer) error
	UploadLink(context.Context, *TransportData) (*Response, error)
	UploadDir(context.Context, *TransportData) (*Response, error)
}

// UnimplementedTransportServer can be embedded to have forward compatible implementations.
type UnimplementedTransportServer struct {
}

func (*UnimplementedTransportServer) UploadFile(Transport_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (*UnimplementedTransportServer) UploadLink(context.Context, *TransportData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadLink not implemented")
}
func (*UnimplementedTransportServer) UploadDir(context.Context, *TransportData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadDir not implemented")
}

func RegisterTransportServer(s *grpc.Server, srv TransportServer) {
	s.RegisterService(&_Transport_serviceDesc, srv)
}

func _Transport_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransportServer).UploadFile(&transportUploadFileServer{stream})
}

type Transport_UploadFileServer interface {
	SendAndClose(*Response) error
	Recv() (*TransportData, error)
	grpc.ServerStream
}

type transportUploadFileServer struct {
	grpc.ServerStream
}

func (x *transportUploadFileServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transportUploadFileServer) Recv() (*TransportData, error) {
	m := new(TransportData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Transport_UploadLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransportData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServer).UploadLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Transport/UploadLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServer).UploadLink(ctx, req.(*TransportData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transport_UploadDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransportData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServer).UploadDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Transport/UploadDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServer).UploadDir(ctx, req.(*TransportData))
	}
	return interceptor(ctx, in, info, handler)
}

var _Transport_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Transport",
	HandlerType: (*TransportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadLink",
			Handler:    _Transport_UploadLink_Handler,
		},
		{
			MethodName: "UploadDir",
			Handler:    _Transport_UploadDir_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _Transport_UploadFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "actions.proto",
}
